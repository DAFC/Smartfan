/*
function drawGraph0(data,distance,id){
	var graph = document.getElementById(id);
	var c = graph.getContext('2d');
	c.strokeStyle = 'rgb(32,32,32)';
	c.beginPath();
	var length = data.length;
	for(var i = length; i >= 0; i--){
		c.lineTo(500-(i+1)*distance, graph.height-data[length-i]*4);
	}
	c.stroke();
	for(var i = length; i >= 0; i--){
		c.beginPath();
		c.arc(500-(i+1)*distance, graph.height-data[length-i]*4 , 3, 0, Math.PI * 2, false);
		c.fill();
	}
}
*/

var DataName;
(function (DataName) {
    DataName[DataName["Temperature"] = 0] = "Temperature";
    DataName[DataName["Humidity"] = 1] = "Humidity";
})(DataName || (DataName = {}));

var Graph = (function () {
    function Graph(canvasId, dataName, dataURL) {
        this.canvas = document.getElementById(canvasId);
        this.context = this.canvas.getContext('2d');
        this.dataName = dataName;
        this.dataURL = dataURL;

        this.context.fillStyle = "rgb(0,0,0)";
        this.context.strokeStyle = "rgb(32,32,32)";
        this.context.font = "18px 'sans-serif'";
    }
    Graph.prototype.position = function (value, median, absmax) {
        var v = (value - median) / absmax;
        v *= (this.canvas.height - 20) / 2;
        v += this.canvas.height / 2;
        return (this.canvas.height - v);
    };

    Graph.prototype.Draw = function () {
        var _this = this;
        var req = new XMLHttpRequest();
        req.open('GET', this.dataURL, false);
        req.setRequestHeader("Pragma", "no-cache");
        req.send();
        var data = req.responseText.split('\n');
        delete req;
        var array = Array();
        data.forEach(function (line) {
            var str = line.split(',')[_this.dataName];
            if ((str != null) && (str != "") && (str != undefined)) {
                array.push(+str);
            }
        });

        var median = 0;
        array.forEach(function (value) {
            median += value;
        });
        median /= array.length;

        var absmax = 0;
        array.forEach(function (value) {
            if (absmax < Math.abs(median - value)) {
                absmax = Math.abs(median - value);
            }
        });

        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);

        this.context.fillText((Math.round(median * 10) / 10).toString(), 0, this.canvas.height / 2 - 5);
        this.context.moveTo(0, this.canvas.height / 2);
        this.context.lineTo(this.canvas.width, this.canvas.height / 2);
        this.context.stroke();

        this.context.beginPath();
        for (var i = array.length; i >= 0; i--) {
            this.context.lineTo(this.canvas.width - (i + 1) * 50, this.position(array[array.length - i], median, absmax));
        }
        this.context.stroke();

        for (var i = array.length; i >= 0; i--) {
            this.context.beginPath();
            this.context.arc(this.canvas.width - (i + 1) * 50, this.position(array[array.length - i], median, absmax), 3, 0, Math.PI * 2, false);
            this.context.fill();
        }
    };

    Graph.prototype.start = function () {
        var _this = this;
        this.Draw();
        this.timerToken = setInterval(function () {
            _this.Draw();
        }, 100);
    };
    return Graph;
})();
